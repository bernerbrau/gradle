// A project extension
class SourceGenerationExtension {
    // The directory to write the generated source files to
    final DirectoryProperty sourceDir

    // The configuration file to use for source generation
    final RegularFileProperty configFile

    @javax.inject.Inject
    SourceGenerationExtension(ObjectFactory objects) {
        sourceDir = objects.directoryProperty()
        configFile = objects.fileProperty()
    }
}

// A task that generates a source file and writes the result to an output directory
class GenerateSource extends DefaultTask {
    @InputFile
    final RegularFileProperty configFile = project.objects.fileProperty()

    @OutputDirectory
    final DirectoryProperty outputDir = project.objects.directoryProperty()

    @TaskAction
    def compile() {
        def inFile = configFile.get().asFile
        logger.quiet("configuration file = " + inFile)
        def dir = outputDir.get().asFile
        logger.quiet("output dir = " + dir)
        def srcFile = new File(dir, "UsefulThing.java")
        srcFile.text = "public class UsefulThing { }"
    }
}

// Create the project extension
project.extensions.create('source', SourceGenerationExtension, project.objects)

// Create the source generation task
task generated(type: GenerateSource) {
    // Attach configuration from the project extension
    // Note that the values of the project extension have not been configured yet
    configFile = project.source.configFile
    outputDir = project.source.sourceDir
}

source {
    // Configure the locations
    // Don't need to reconfigure the task's properties. These are automatically updated as the extension properties change
    sourceDir = project.layout.buildDirectory.dir('generated-source')
    configFile = project.layout.projectDirectory.file('src/main/config.txt')

    // Note that a `File` instance can be used as a convenience to set a location
    configFile = file('src/config.txt')
}

// Change the build directory
// Don't need to reconfigure the extension or task properties. These are automatically updated as the build directory changes
buildDir = 'output'
